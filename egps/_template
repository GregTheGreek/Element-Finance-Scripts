import { BytesLike, ethers } from "ethers";
import { LedgerSigner } from "@ethersproject/hardware-wallets";

// Artifacts
import timelockData from "../../artifacts/council/contracts/features/Timelock.sol/Timelock.json";
import treasuryData from "../../artifacts/council/contracts/features/Treasury.sol/Treasury.json";
import { CoreVoting__factory } from "../../typechain/council/factories/CoreVoting__factory";

// Helpers
import * as addresses from "../helpers/addresses";
import {createCallHash} from "../helpers/hashing";

async function proposal() {
  // Setup your signer
  // Using a ledger, connect to metamask
  const providerUrl = "";
  const provider = new ethers.providers.JsonRpcProvider(providerUrl);
  const signer = new LedgerSigner(provider, undefined, "m/44'/60'/3'/0/0");
  
  // Setup your interfaces
  const timelockInterface = new ethers.utils.Interface(timelockData.abi); // TimeLock is like sudo, you always need it.
  const treasuryInterface = new ethers.utils.Interface(treasuryData.abi); // TimeLock is like sudo, you always need it.

  // New Params
  // @TODO - fill in.

  // Connect the signer to the coreVotingContract, this is where your proposals will fed into.
  const coreVoting = CoreVoting__factory.connect(
    addresses.CoreVoting,
    signer
  );

  // --- main egp logic ---
  /**
   * Steps:
   * 1. Encode the function(s) you wish to call within the DAO
   * 2. Convert the encoded function data into a "callHash"
   * 3. Encode the callHash with the timelock interface function `registerCall`
   * 4. Call core voting with the encoded data
   */

  /** 
   * Create calldata for the proposal
   * Notes:
   * - This is the maint part of the proposal, it dictates what the dao will be modifying etc...
   * - Take the function you want to call and encode it, with the correct parameters
   */

  /** EXAMPLE please modify accordingly*/
  const callData = treasuryInterface.encodeFunctionData("sendFunds", [addresses.ELFI, 100, 0x0000000000000000000000000000]);

  /**
   * Take the calldata and convert it to the callhash.
   * Param BytesLike[] - An arrary of encoded calldata
   * Param string[] - An array of addresses, index must match that from the first parameter
   * Notes:
   * - You can pass in as many "chained calls" as you like, just match the calldata to the addresses in the two parameters.
   */
  const callHash = await createCallHash(
    [callData], // calldata
    [addresses.Treasury] // Both target treasury to move funds
  );

  /**
   * Encode proposal to be sent to the core voting contract
   * Notes:
   * - Simple add the multiple call hashes into the array.
   * - You can have multiple callHashes, if a proposal affects multiple different vaults or other DAO contracts.
   * - eg: Proposal updates a voting threshold, and moves funds from the treasury. This would be two callHashes.
   */
  const calldataCv = timelockInterface.encodeFunctionData("registerCall", [
    callHash,
  ]);

  /**
   * Creates the expiery for the proposal, no need to modify.
   * Default: xxxx
   */
  const expiryDate = 15378000; // TODO change to something automatic.

  /**
   * The coreVoting contract registers the call with the timelock
   * - Supply all the vaults where you wish voting power to originate from.
   */
  const tx = await coreVoting.proposal(
    [addresses.FrozenLockingVaultProxy, addresses.FrozenVestingVaultProxy], // Forzen vaults because all ELFI lives there
    ["0x", "0x"], // Extra data - typically 0x
    [addresses.Timelock], // You always call the timelock, the timelock is "sudo" it controls the DAO contracts.
    [calldataCv], // load in the call data
    expiryDate, // Last call for proposal
    0, // This is your vote. change if you please.
    // Gas Settings - TODO modify
    {
      maxFeePerGas: 110820118419,
      maxPriorityFeePerGas: 2,
      gasLimit: 5000000
    }
  );

  // --- end main EGP logic ---

  await tx.wait();

  // need these 2 values to execute from the timelock after lock duration, please keep record of them.
  console.log({
    callData,
    callHash
  });
}

async function main() {
  const result = await proposal();
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockAssetTransfersHandler,
  MockAssetTransfersHandlerInterface,
} from "../MockAssetTransfersHandler";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWETH",
        name: "weth",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "depositToInternalBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
    ],
    name: "getInternalBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAsset",
        name: "asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "bool",
        name: "fromInternalBalance",
        type: "bool",
      },
    ],
    name: "receiveAsset",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAsset",
        name: "asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address payable",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "bool",
        name: "toInternalBalance",
        type: "bool",
      },
    ],
    name: "sendAsset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516109da3803806109da83398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c61094b61008f6000398061011b525061094b6000f3fe6080604052600436106100435760003560e01c80631f51af7d146100905780638a65d2e0146100b057806390c185ae146100e6578063e65f9702146101065761008b565b3661008b57610089610053610119565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461020661013d565b005b600080fd5b34801561009c57600080fd5b506100896100ab3660046107e2565b61014f565b3480156100bc57600080fd5b506100d06100cb36600461074e565b610161565b6040516100dd91906108d9565b60405180910390f35b3480156100f257600080fd5b50610089610101366004610786565b610197565b610089610114366004610834565b6101c9565b7f000000000000000000000000000000000000000000000000000000000000000090565b8161014b5761014b816101d5565b5050565b61015b84848484610242565b50505050565b73ffffffffffffffffffffffffffffffffffffffff91821660009081526020818152604080832093909416825291909152205490565b6101b973ffffffffffffffffffffffffffffffffffffffff831684308461034a565b6101c48383836103ed565b505050565b61015b8484848461042a565b7f08c379a0000000000000000000000000000000000000000000000000000000006000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b8261024c5761015b565b6102558461051b565b156102ff57610267811561020261013d565b61026f610119565b73ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d846040518263ffffffff1660e01b81526004016102a791906108d9565b600060405180830381600087803b1580156102c157600080fd5b505af11580156102d5573d6000803e3d6000fd5b506102fa9250505073ffffffffffffffffffffffffffffffffffffffff831684610535565b61015b565b600061030a856105bc565b905081156103225761031d8382866103ed565b610343565b61034373ffffffffffffffffffffffffffffffffffffffff821684866105bf565b5050505050565b61015b846323b872dd60e01b85858560405160240161036b93929190610882565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526105de565b73ffffffffffffffffffffffffffffffffffffffff9283166000908152602081815260408083209490951682529290925291902080549091019055565b826104345761015b565b61043d8461051b565b156104cb5761044f811561020261013d565b61045e8347101561020461013d565b610466610119565b73ffffffffffffffffffffffffffffffffffffffff1663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b1580156104ad57600080fd5b505af11580156104c1573d6000803e3d6000fd5b505050505061015b565b60006104d6856105bc565b905081156104f35760006104ed848387600161068b565b90940393505b83156103435761034373ffffffffffffffffffffffffffffffffffffffff821684308761034a565b73ffffffffffffffffffffffffffffffffffffffff161590565b610544814710156101a361013d565b60008273ffffffffffffffffffffffffffffffffffffffff168260405161056a906105bc565b60006040518083038185875af1925050503d80600081146105a7576040519150601f19603f3d011682016040523d82523d6000602084013e6105ac565b606091505b505090506101c4816101a461013d565b90565b6101c48363a9059cbb60e01b848460405160240161036b9291906108b3565b600060608373ffffffffffffffffffffffffffffffffffffffff16836040516106079190610849565b6000604051808303816000865af19150503d8060008114610644576040519150601f19603f3d011682016040523d82523d6000602084013e610649565b606091505b50915091506000821415610661573d6000803e3d6000fd5b61015b81516000148061068357508180602001905181019061068391906107c6565b6101a261013d565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260208181526040808320938716835292905290812054826106c957836106d3565b6106d38185610720565b91506106df8183610738565b73ffffffffffffffffffffffffffffffffffffffff968716600090815260208181526040808320989099168252969096529590942094909455509192915050565b600081831061072f5781610731565b825b9392505050565b600061074883831115600161013d565b50900390565b60008060408385031215610760578182fd5b823561076b816108e2565b9150602083013561077b816108e2565b809150509250929050565b60008060006060848603121561079a578081fd5b83356107a5816108e2565b925060208401356107b5816108e2565b929592945050506040919091013590565b6000602082840312156107d7578081fd5b815161073181610907565b600080600080608085870312156107f7578081fd5b8435610802816108e2565b9350602085013592506040850135610819816108e2565b9150606085013561082981610907565b939692955090935050565b600080600080608085870312156107f7578384fd5b60008251815b81811015610869576020818601810151858301520161084f565b818111156108775782828501525b509190910192915050565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff8116811461090457600080fd5b50565b801515811461090457600080fdfea2646970667358221220b4e654d057ad6fbc895f28131b93b4c150e67eb6cd4553cccf4f1500ec571e2464736f6c63430007010033";

type MockAssetTransfersHandlerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockAssetTransfersHandlerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAssetTransfersHandler__factory extends ContractFactory {
  constructor(...args: MockAssetTransfersHandlerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    weth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockAssetTransfersHandler> {
    return super.deploy(
      weth,
      overrides || {}
    ) as Promise<MockAssetTransfersHandler>;
  }
  getDeployTransaction(
    weth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(weth, overrides || {});
  }
  attach(address: string): MockAssetTransfersHandler {
    return super.attach(address) as MockAssetTransfersHandler;
  }
  connect(signer: Signer): MockAssetTransfersHandler__factory {
    return super.connect(signer) as MockAssetTransfersHandler__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAssetTransfersHandlerInterface {
    return new utils.Interface(_abi) as MockAssetTransfersHandlerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockAssetTransfersHandler {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockAssetTransfersHandler;
  }
}

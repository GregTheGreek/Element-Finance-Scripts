/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BytesLike,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestUserProxy, TestUserProxyInterface } from "../TestUserProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_weth",
        type: "address",
      },
      {
        internalType: "address",
        name: "_trancheFactory",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_trancheBytecodeHash",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "authorize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "authorized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "deauthorize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "deprecate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "position",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "expiration",
        type: "uint256",
      },
    ],
    name: "deriveTranche",
    outputs: [
      {
        internalType: "contract ITranche",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "isAuthorized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isFrozen",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "contract IERC20",
        name: "_underlying",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_expiration",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_position",
        type: "address",
      },
      {
        components: [
          {
            internalType: "contract IERC20Permit",
            name: "tokenContract",
            type: "address",
          },
          {
            internalType: "address",
            name: "who",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expiration",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
        ],
        internalType: "struct UserProxy.PermitData[]",
        name: "_permitCallData",
        type: "tuple[]",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_newState",
        type: "bool",
      },
    ],
    name: "setIsFrozen",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "weth",
    outputs: [
      {
        internalType: "contract IWETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_expiration",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_position",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amountPT",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amountYT",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "contract IERC20Permit",
            name: "tokenContract",
            type: "address",
          },
          {
            internalType: "address",
            name: "who",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expiration",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
        ],
        internalType: "struct UserProxy.PermitData[]",
        name: "_permitCallData",
        type: "tuple[]",
      },
    ],
    name: "withdrawWeth",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60e06040526002805460ff191690553480156200001b57600080fd5b5060405162001a9e38038062001a9e8339810160408190526200003e91620000d0565b600080546001600160a01b0319163390811790915583908390839062000064906200008c565b6001600160601b0319606093841b81166080529190921b1660a05260c0525062000110915050565b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b80516001600160a01b0381168114620000cb57600080fd5b919050565b600080600060608486031215620000e5578283fd5b620000f084620000b3565b92506200010060208501620000b3565b9150604084015190509250925092565b60805160601c60a05160601c60c051611936620001686000396000610fbc01526000610f9801526000818160f30152818161041e0152818161058001528181610a3101528181610c860152610d3f01526119366000f3fe6080604052600436106100d65760003560e01c806364eda74b1161007f578063b6a5d7de11610059578063b6a5d7de1461023b578063b841d2d21461025b578063b91816111461027c578063fe9fbb801461029c5761011f565b806364eda74b146101e65780636f1ea24c146102065780638da5cb5b146102265761011f565b806327c97fa5116100b057806327c97fa51461018f57806333eeb147146101af5780633fc8cef3146101d15761011f565b80630a08ca67146101245780630fcc0c281461015a57806313af40351461016f5761011f565b3661011f573373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461011d57600080fd5b005b600080fd5b34801561013057600080fd5b5061014461013f366004611246565b6102bc565b604051610151919061151e565b60405180910390f35b34801561016657600080fd5b5061011d6102cf565b34801561017b57600080fd5b5061011d61018a36600461122a565b610312565b34801561019b57600080fd5b5061011d6101aa36600461122a565b610390565b3480156101bb57600080fd5b506101c4610413565b60405161015191906115e4565b3480156101dd57600080fd5b5061014461041c565b3480156101f257600080fd5b5061011d610201366004611271565b610440565b34801561021257600080fd5b5061011d610221366004611395565b610496565b34801561023257600080fd5b50610144610af4565b34801561024757600080fd5b5061011d61025636600461122a565b610b10565b61026e610269366004611406565b610b53565b604051610151929190611842565b34801561028857600080fd5b506101c461029736600461122a565b610eda565b3480156102a857600080fd5b506101c46102b736600461122a565b610eef565b60006102c88383610f1e565b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461030f5760405162461bcd60e51b815260040161030690611626565b60405180910390fd5b33ff5b60005473ffffffffffffffffffffffffffffffffffffffff1633146103495760405162461bcd60e51b815260040161030690611626565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103c75760405162461bcd60e51b815260040161030690611626565b73ffffffffffffffffffffffffffffffffffffffff16600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b60025460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b61044933610eef565b6104655760405162461bcd60e51b81526004016103069061165d565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60025460ff16156104b95760405162461bcd60e51b8152600401610306906117de565b8181808060200260200160405190810160405280939291908181526020016000905b82821015610507576104f860e083028601368190038101906112c5565b815260200190600101906104db565b5050505050805160001461057e5760005b815181101561057c5761056a82828151811061055d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611021565b8061057481611868565b915050610518565b505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105fb57600080fd5b505afa15801561060f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063391906112a9565b73ffffffffffffffffffffffffffffffffffffffff16146106665760405162461bcd60e51b8152600401610306906116cb565b8415158061067357508315155b61068f5760405162461bcd60e51b815260040161030690611694565b600061069b8789610f1e565b905060008087156107f8576040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906323b872dd906106fc90339030908d9060040161153f565b602060405180830381600087803b15801561071657600080fd5b505af115801561072a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074e919061128d565b506040517f884e17f300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063884e17f3906107a3908b90309060040161181e565b602060405180830381600087803b1580156107bd57600080fd5b505af11580156107d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f5919061137d565b91505b86156109d45760008373ffffffffffffffffffffffffffffffffffffffff1663764b666c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561084657600080fd5b505afa15801561085a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087e91906112a9565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff8216906323b872dd906108d790339030908d9060040161153f565b602060405180830381600087803b1580156108f157600080fd5b505af1158015610905573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610929919061128d565b506040517f1210aac200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851690631210aac29061097e908b90309060040161181e565b602060405180830381600087803b15801561099857600080fd5b505af11580156109ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d0919061137d565b9150505b87156109f757816109f75760405162461bcd60e51b815260040161030690611702565b8615610a1a5780610a1a5760405162461bcd60e51b815260040161030690611739565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016632e1a7d4d610a608385611850565b6040518263ffffffff1660e01b8152600401610a7c9190611815565b600060405180830381600087803b158015610a9657600080fd5b505af1158015610aaa573d6000803e3d6000fd5b503392506108fc9150610abf90508385611850565b6040518115909202916000818181858888f19350505050158015610ae7573d6000803e3d6000fd5b5050505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b475760405162461bcd60e51b815260040161030690611626565b610b50816110b7565b50565b600254600090819060ff1615610b7b5760405162461bcd60e51b8152600401610306906117de565b8383808060200260200160405190810160405280939291908181526020016000905b82821015610bc957610bba60e083028601368190038101906112c5565b81526020019060010190610b9d565b50505050508051600014610c335760005b8151811015610c3157610c1f82828151811061055d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80610c2981611868565b915050610bda565b505b73ffffffffffffffffffffffffffffffffffffffff881673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610dd157883414610c845760405162461bcd60e51b8152600401610306906117a7565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610cec57600080fd5b505af1158015610d00573d6000803e3d6000fd5b50506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb9250610d79915089908d906004016115be565b602060405180830381600087803b158015610d9357600080fd5b505af1158015610da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcb919061128d565b50610e99565b3415610def5760405162461bcd60e51b8152600401610306906115ef565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8916906323b872dd90610e459033908a908e9060040161153f565b602060405180830381600087803b158015610e5f57600080fd5b505af1158015610e73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e97919061128d565b505b600080610ea68989611109565b915091508a811015610eca5760405162461bcd60e51b815260040161030690611770565b909a909950975050505050505050565b60016020526000908152604090205460ff1681565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604090205460ff165b919050565b6000808383604051602001610f34929190611485565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905280516020918201209250600091610fe2917fff00000000000000000000000000000000000000000000000000000000000000917f00000000000000000000000000000000000000000000000000000000000000009186917f000000000000000000000000000000000000000000000000000000000000000091016114ba565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152919052805160209091012095945050505050565b806000015173ffffffffffffffffffffffffffffffffffffffff1663d505accf338360200151846040015185606001518660c0015187608001518860a001516040518863ffffffff1660e01b81526004016110829796959493929190611570565b600060405180830381600087803b15801561109c57600080fd5b505af11580156110b0573d6000803e3d6000fd5b5050505050565b73ffffffffffffffffffffffffffffffffffffffff16600090815260016020819052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055565b60008060006111188486610f1e565b6040517f85f45c8800000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff8216906385f45c889061116d90339060040161151e565b6040805180830381600087803b15801561118657600080fd5b505af115801561119a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111be9190611462565b92509250505b9250929050565b8035610f19816118d0565b60008083601f8401126111e7578182fd5b50813567ffffffffffffffff8111156111fe578182fd5b60208301915083602060e0830285010111156111c457600080fd5b803560ff81168114610f1957600080fd5b60006020828403121561123b578081fd5b81356102c8816118d0565b60008060408385031215611258578081fd5b8235611263816118d0565b946020939093013593505050565b600060208284031215611282578081fd5b81356102c8816118f2565b60006020828403121561129e578081fd5b81516102c8816118f2565b6000602082840312156112ba578081fd5b81516102c8816118d0565b600060e082840312156112d6578081fd5b60405160e0810181811067ffffffffffffffff8211171561131e577f4e487b710000000000000000000000000000000000000000000000000000000083526041600452602483fd5b60405261132a836111cb565b8152611338602084016111cb565b602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015261137160c08401611219565b60c08201529392505050565b60006020828403121561138e578081fd5b5051919050565b60008060008060008060a087890312156113ad578182fd5b8635955060208701356113bf816118d0565b94506040870135935060608701359250608087013567ffffffffffffffff8111156113e8578283fd5b6113f489828a016111d6565b979a9699509497509295939492505050565b60008060008060008060a0878903121561141e578182fd5b863595506020870135611430816118d0565b9450604087013593506060870135611447816118d0565b9250608087013567ffffffffffffffff8111156113e8578283fd5b60008060408385031215611474578182fd5b505080516020909101519092909150565b60609290921b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000168252601482015260340190565b7fff0000000000000000000000000000000000000000000000000000000000000094909416845260609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830152603582015260550190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff97881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b6020808252600b908201527f4e6f6e2070617961626c65000000000000000000000000000000000000000000604082015260600190565b60208082526010908201527f53656e646572206e6f74206f776e657200000000000000000000000000000000604082015260600190565b60208082526015908201527f53656e646572206e6f7420417574686f72697a65640000000000000000000000604082015260600190565b60208082526010908201527f496e76616c696420776974686472617700000000000000000000000000000000604082015260600190565b6020808252600e908201527f4e6f6e207765746820746f6b656e000000000000000000000000000000000000604082015260600190565b60208082526006908201527f5275676765640000000000000000000000000000000000000000000000000000604082015260600190565b60208082526010908201527f4e6f207969656c64206163637275656400000000000000000000000000000000604082015260600190565b60208082526011908201527f4e6f7420656e6f756768206d696e746564000000000000000000000000000000604082015260600190565b60208082526019908201527f496e636f727265637420616d6f756e742070726f766964656400000000000000604082015260600190565b6020808252600f908201527f436f6e74726163742066726f7a656e0000000000000000000000000000000000604082015260600190565b90815260200190565b91825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b918252602082015260400190565b60008219821115611863576118636118a1565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561189a5761189a6118a1565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610b5057600080fd5b8015158114610b5057600080fdfea26469706673582212209990cd1fc81b78a0b755a087d6538cedf6451b4dc7e05c78f18133dcf445fe2b64736f6c63430008000033";

type TestUserProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestUserProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestUserProxy__factory extends ContractFactory {
  constructor(...args: TestUserProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _weth: string,
    _trancheFactory: string,
    _trancheBytecodeHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestUserProxy> {
    return super.deploy(
      _weth,
      _trancheFactory,
      _trancheBytecodeHash,
      overrides || {}
    ) as Promise<TestUserProxy>;
  }
  getDeployTransaction(
    _weth: string,
    _trancheFactory: string,
    _trancheBytecodeHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _weth,
      _trancheFactory,
      _trancheBytecodeHash,
      overrides || {}
    );
  }
  attach(address: string): TestUserProxy {
    return super.attach(address) as TestUserProxy;
  }
  connect(signer: Signer): TestUserProxy__factory {
    return super.connect(signer) as TestUserProxy__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestUserProxyInterface {
    return new utils.Interface(_abi) as TestUserProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestUserProxy {
    return new Contract(address, _abi, signerOrProvider) as TestUserProxy;
  }
}

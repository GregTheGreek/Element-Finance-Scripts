/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  PoolPriceOracleMock,
  PoolPriceOracleMockInterface,
} from "../PoolPriceOracleMock";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "newSample",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sampleIndex",
        type: "uint256",
      },
    ],
    name: "PriceDataProcessed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "sample",
        type: "bytes32",
      },
    ],
    name: "decode",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct PoolPriceOracleMock.Sample",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct PoolPriceOracleMock.Sample",
        name: "sample",
        type: "tuple",
      },
    ],
    name: "encode",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "dates",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
    ],
    name: "findNearestSamplesTimestamp",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "prev",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "next",
            type: "uint256",
          },
        ],
        internalType: "struct PoolPriceOracleMock.BinarySearchResult[]",
        name: "results",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPriceOracle.Variable",
        name: "variable",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "currentIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "getPastAccumulator",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getSample",
    outputs: [
      {
        internalType: "int256",
        name: "logPairPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "accLogPairPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logBptPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "accLogBptPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logInvariant",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "accLogInvariant",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalSamples",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct PoolPriceOracleMock.Sample",
        name: "sample",
        type: "tuple",
      },
    ],
    name: "mockSample",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "indexes",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct PoolPriceOracleMock.Sample[]",
        name: "samples",
        type: "tuple[]",
      },
    ],
    name: "mockSamples",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "elapsed",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentIndex",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "logPairPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logBptPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logInvariant",
        type: "int256",
      },
    ],
    name: "processPriceData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "sample",
        type: "bytes32",
      },
      {
        internalType: "int256",
        name: "logPairPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logBptPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logInvariant",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "update",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct PoolPriceOracleMock.Sample",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610edb806100206000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063c3748ef111610076578063d5125db61161005b578063d5125db614610182578063e5fe5f3c14610195578063ff7b6f1e146101a8576100be565b8063c3748ef114610142578063d437680414610162576100be565b80633d48f8c1116100a75780633d48f8c11461010157806360d1507c14610114578063b48b5b401461013a576100be565b8063259efd16146100c3578063264959fb146100d8575b600080fd5b6100d66100d1366004610d4b565b6101bb565b005b6100eb6100e6366004610cf9565b6101da565b6040516100f89190610dd7565b60405180910390f35b6100eb61010f366004610d30565b6101f3565b610127610122366004610ca7565b610226565b6040516100f89796959493929190610de0565b6100eb61026f565b610155610150366004610ca7565b610275565b6040516100f89190610e10565b610175610170366004610c64565b6102fa565b6040516100f89190610d78565b6100d6610190366004610cbf565b6103ce565b6100d66101a3366004610b9f565b610428565b6101556101b6366004610cbf565b610471565b6101c4816101f3565b6000928352602083905260409092209190915550565b60006101e98484844203610493565b90505b9392505050565b6000610220826000015183602001518460400151856060015186608001518760a001518860c001516105d9565b92915050565b6000806000806000806000610241610400891061013b610639565b600061024c8961064b565b90506102578161065d565b959f949e50929c50909a509850965090945092505050565b61040090565b61027d610a77565b6040805160e08101909152806102948460006106c0565b81526020016102a484600061070b565b81526020016102b48460016106c0565b81526020016102c484600161070b565b81526020016102d48460026106c0565b81526020016102e484600261070b565b81526020016102f28461074f565b905292915050565b6060825167ffffffffffffffff8111801561031457600080fd5b5060405190808252806020026020018201604052801561034e57816020015b61033b610ab4565b8152602001906001900390816103335790505b50905060005b83518110156103c75760008061037d86848151811061036f57fe5b60200260200101518661075b565b9150915060405180604001604052806103958461074f565b81526020016103a38361074f565b8152508484815181106103b257fe5b60209081029190910101525050600101610354565b5092915050565b4285900360006103e1828787878761080e565b90507fa7f3e984c65d79d0fa58244dddb6522f661c9dea23fe4940801cbfe0881075068682141582604051610417929190610dc7565b60405180910390a150505050505050565b60005b825181101561046c5761046483828151811061044357fe5b602002602001015183838151811061045757fe5b60200260200101516101bb565b60010161042b565b505050565b610479610a77565b6104896101508787878787610865565b9695505050505050565b60006104a482421015610138610639565b4282900360006104b38561064b565b905060006104c08261074f565b90506104d160008211610139610639565b8281116104fd57808303806104e6848a6106c0565b026104f1848a61070b565b019450505050506101ec565b6000610508876108c5565b905060006105158261064b565b905060006105228261074f565b905061053360008211610139610639565b6105428682111561013a610639565b5050600080610551868461075b565b9150915060006105608361074f565b6105698361074f565b03905080156105c157600061057e848d61070b565b610588848e61070b565b03905060006105968561074f565b8903905082818302816105a557fe5b056105b0868f61070b565b0199505050505050505050506101ec565b6105cb838c61070b565b9750505050505050506101ec565b60006105e582826108d2565b6105f084601f6108d6565b6105fb8660546108e7565b61060688606a6108d6565b6106118a609f6108e7565b61061c8c60b56108d6565b6106278e60ea6108e7565b17171717171798975050505050505050565b8161064757610647816108f4565b5050565b60009081526020819052604090205490565b600080600080600080600061067188610961565b965061067c8861096e565b95506106878861097b565b945061069288610988565b935061069d88610995565b92506106a8886109a2565b91506106b38861074f565b9050919395979092949650565b6000808260028111156106cf57fe5b14156106e5576106de83610961565b9050610220565b60018260028111156106f357fe5b1415610702576106de8361097b565b6106de83610995565b60008082600281111561071a57fe5b1415610729576106de8361096e565b600182600281111561073757fe5b1415610746576106de83610988565b6106de836109a2565b600061022082826109af565b600080806103ff8180805b8385116107d25760028585010461077d818a6109b9565b93506107888461064b565b92506107938361074f565b9150898210156107a8578060010195506107cc565b898211156107bb576001810394506107cc565b828397509750505050505050610807565b50610766565b8881106107f0576107ea6107e5846109ca565b61064b565b826107fd565b816107fd6107e5856108c5565b9650965050505050505b9250929050565b60008061082a858585426108218b61064b565b93929190610865565b905060784288900310158061083f5786610848565b610848876108c5565b600081815260208190526040902092909255509695505050505050565b6000806108718761074f565b8303905060008187026108838961096e565b01905060008287026108948a610988565b01905060008387026108a58b6109a2565b0190506108b789848a858b868c6105d9565b9a9950505050505050505050565b60006102208260016109b9565b1b90565b661fffffffffffff91909116901b90565b623fffff91909116901b90565b7f08c379a0000000000000000000000000000000000000000000000000000000006000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b60006102208260ea6109d7565b60006102208260b5610a1d565b600061022082609f6109d7565b600061022082606a610a1d565b60006102208260546109d7565b600061022082601f610a1d565b1c637fffffff1690565b60006104008383015b069392505050565b6000610220826001610a68565b600082821c623fffff16621fffff81136109f15780610a15565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000081175b949350505050565b600082821c661fffffffffffff16660fffffffffffff8113610a3f5780610a15565b7fffffffffffffffffffffffffffffffffffffffffffffffffffe0000000000000179392505050565b600061040082840381016109c2565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b600082601f830112610ade578081fd5b8135610af1610aec82610e85565b610e5e565b818152915060208083019084810181840286018201871015610b1257600080fd5b60005b84811015610b3157813584529282019290820190600101610b15565b505050505092915050565b600060e08284031215610b4d578081fd5b610b5760e0610e5e565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015292915050565b60008060408385031215610bb1578182fd5b823567ffffffffffffffff80821115610bc8578384fd5b610bd486838701610ace565b9350602091508185013581811115610bea578384fd5b85019050601f81018613610bfc578283fd5b8035610c0a610aec82610e85565b8181528381019083850160e0808502860187018b1015610c28578788fd5b8795505b84861015610c5457610c3e8b83610b3c565b8452600195909501949286019290810190610c2c565b5096999098509650505050505050565b60008060408385031215610c76578182fd5b823567ffffffffffffffff811115610c8c578283fd5b610c9885828601610ace565b95602094909401359450505050565b600060208284031215610cb8578081fd5b5035919050565b600080600080600060a08688031215610cd6578081fd5b505083359560208501359550604085013594606081013594506080013592509050565b600080600060608486031215610d0d578283fd5b833560038110610d1b578384fd5b95602085013595506040909401359392505050565b600060e08284031215610d41578081fd5b6101ec8383610b3c565b6000806101008385031215610d5e578182fd5b82359150610d6f8460208501610b3c565b90509250929050565b602080825282518282018190526000919060409081850190868401855b82811015610dba57815180518552860151868501529284019290850190600101610d95565b5091979650505050505050565b9115158252602082015260400190565b90815260200190565b968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b60405181810167ffffffffffffffff81118282101715610e7d57600080fd5b604052919050565b600067ffffffffffffffff821115610e9b578081fd5b506020908102019056fea2646970667358221220f787e35b3c7263a29640f9c88a0c27fb1292400adb7fb2b057cf0151621d50c864736f6c63430007010033";

type PoolPriceOracleMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PoolPriceOracleMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PoolPriceOracleMock__factory extends ContractFactory {
  constructor(...args: PoolPriceOracleMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PoolPriceOracleMock> {
    return super.deploy(overrides || {}) as Promise<PoolPriceOracleMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PoolPriceOracleMock {
    return super.attach(address) as PoolPriceOracleMock;
  }
  connect(signer: Signer): PoolPriceOracleMock__factory {
    return super.connect(signer) as PoolPriceOracleMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PoolPriceOracleMockInterface {
    return new utils.Interface(_abi) as PoolPriceOracleMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PoolPriceOracleMock {
    return new Contract(address, _abi, signerOrProvider) as PoolPriceOracleMock;
  }
}

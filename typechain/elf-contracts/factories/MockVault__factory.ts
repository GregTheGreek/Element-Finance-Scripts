/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockVault, MockVaultInterface } from "../MockVault";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IAuthorizer",
        name: "authorizer",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "liquidityProvider",
        type: "address",
      },
      {
        indexed: false,
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "int256[]",
        name: "deltas",
        type: "int256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "protocolFees",
        type: "uint256[]",
      },
    ],
    name: "PoolBalanceChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "tokenIn",
        type: "address",
      },
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "tokenOut",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Swap",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "poolAddress",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "currentBalances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "lastChangeBlock",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "protocolFeePercentage",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "userData",
        type: "bytes",
      },
    ],
    name: "callExitPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "poolAddress",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "currentBalances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "lastChangeBlock",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "protocolFeePercentage",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "userData",
        type: "bytes",
      },
    ],
    name: "callJoinPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        components: [
          {
            internalType: "enum IVault.SwapKind",
            name: "kind",
            type: "uint8",
          },
          {
            internalType: "contract IERC20",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "contract IERC20",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "poolId",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "lastChangeBlock",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "userData",
            type: "bytes",
          },
        ],
        internalType: "struct IPoolSwapStructs.SwapRequest",
        name: "request",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "balanceTokenIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "balanceTokenOut",
        type: "uint256",
      },
    ],
    name: "callMinimalPoolSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAuthorizer",
    outputs: [
      {
        internalType: "contract IAuthorizer",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
    ],
    name: "getPoolTokens",
    outputs: [
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IVault.PoolSpecialization",
        name: "",
        type: "uint8",
      },
    ],
    name: "registerPool",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    name: "registerTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161126c38038061126c83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b6111db806100916000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063aaabadc51161005b578063aaabadc5146100d3578063f76102db146100e8578063f94d4668146100fb578063fc6156c51461011c5761007d565b806309b2760f146100825780631cf8afb8146100ab57806366a9c7d2146100c0575b600080fd5b610095610090366004610e09565b61012f565b6040516100a29190610fee565b60405180910390f35b6100be6100b9366004610aba565b610135565b005b6100be6100ce366004610d3e565b6103a8565b6100db610442565b6040516100a29190611062565b6100be6100f6366004610bb7565b61045e565b61010e610109366004610d26565b610584565b6040516100a2929190610fc0565b6100be61012a366004610aba565b610729565b50600090565b6060808873ffffffffffffffffffffffffffffffffffffffff1663d5c096c489338a8a8a8a8a6040518863ffffffff1660e01b815260040161017d9796959493929190610ff7565b600060405180830381600087803b15801561019757600080fd5b505af11580156101ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526101f19190810190610cc5565b60008a81526001602052604081209294509092505b81548110156102785783818151811061021b57fe5b602002602001015182600101600084600001848154811061023857fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902080549091019055600101610206565b506060875167ffffffffffffffff8111801561029357600080fd5b506040519080825280602002602001820160405280156102bd578160200160208202803683370190505b5090506060845167ffffffffffffffff811180156102da57600080fd5b50604051908082528060200260200182016040528015610304578160200160208202803683370190505b50905060005b85518110156103465785818151811061031f57fe5b602002602001015182828151811061033357fe5b602090810291909101015260010161030a565b503373ffffffffffffffffffffffffffffffffffffffff168b7fe5ce249087ce04f05a957192435400fd97868dba0e6a4b4c049abf8af80dae7884848860405161039293929190610f57565b60405180910390a3505050505050505050505050565b6000838152600160205260408120905b835181101561043b57816000018482815181106103d157fe5b60209081029190910181015182546001808201855560009485529290932090920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90931692909217909155016103b8565b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b6040517f9d2c110c00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff861690639d2c110c906104b790879087908790600401611083565b602060405180830381600087803b1580156104d157600080fd5b505af11580156104e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105099190610e2f565b9050836040015173ffffffffffffffffffffffffffffffffffffffff16846020015173ffffffffffffffffffffffffffffffffffffffff1685608001517faf6c437771b0b661385e6b30c82a76e9067d1c318485cf0f0c47aeb35a9a1de3846040516105759190610fee565b60405180910390a45050505050565b60008181526001602052604090208054606091829167ffffffffffffffff811180156105af57600080fd5b506040519080825280602002602001820160405280156105d9578160200160208202803683370190505b50815490935067ffffffffffffffff811180156105f557600080fd5b5060405190808252806020026020018201604052801561061f578160200160208202803683370190505b50915060005b81548110156107225781600001818154811061063d57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684828151811061067457fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508160010160008583815181106106c057fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483828151811061070f57fe5b6020908102919091010152600101610625565b5050915091565b6060808873ffffffffffffffffffffffffffffffffffffffff166374f3b00989338a8a8a8a8a6040518863ffffffff1660e01b81526004016107719796959493929190610ff7565b600060405180830381600087803b15801561078b57600080fd5b505af115801561079f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526107e59190810190610cc5565b60008a81526001602052604081209294509092505b815481101561086d5783818151811061080f57fe5b602002602001015182600101600084600001848154811061082c57fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902080549190910390556001016107fa565b506060875167ffffffffffffffff8111801561088857600080fd5b506040519080825280602002602001820160405280156108b2578160200160208202803683370190505b5090506060845167ffffffffffffffff811180156108cf57600080fd5b506040519080825280602002602001820160405280156108f9578160200160208202803683370190505b50905060005b85518110156103465785818151811061091457fe5b602002602001015160000382828151811061092b57fe5b60209081029190910101526001016108ff565b803561094981611180565b92915050565b600082601f83011261095f578081fd5b813561097261096d82611160565b611139565b81815291506020808301908481018184028601820187101561099357600080fd5b60005b848110156109bb5781356109a981611180565b84529282019290820190600101610996565b505050505092915050565b600082601f8301126109d6578081fd5b81516109e461096d82611160565b818152915060208083019084810181840286018201871015610a0557600080fd5b60005b848110156109bb57815184529282019290820190600101610a08565b600082601f830112610a34578081fd5b813567ffffffffffffffff811115610a4a578182fd5b610a7b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611139565b9150808252836020828501011115610a9257600080fd5b8060208401602084013760009082016020015292915050565b80356002811061094957600080fd5b600080600080600080600060e0888a031215610ad4578283fd5b8735610adf81611180565b965060208881013596506040890135610af781611180565b9550606089013567ffffffffffffffff80821115610b13578586fd5b818b0191508b601f830112610b26578586fd5b8135610b3461096d82611160565b8082825285820191508585018f878886028801011115610b5257898afd5b8995505b83861015610b74578035835260019590950194918601918601610b56565b509850505060808b0135955060a08b0135945060c08b0135925080831115610b9a578384fd5b5050610ba88a828b01610a24565b91505092959891949750929550565b60008060008060808587031215610bcc578384fd5b8435610bd781611180565b9350602085013567ffffffffffffffff80821115610bf3578485fd5b818701915061012080838a031215610c09578586fd5b610c1281611139565b9050610c1e8984610aab565b8152610c2d896020850161093e565b6020820152610c3f896040850161093e565b6040820152606083013560608201526080830135608082015260a083013560a0820152610c6f8960c0850161093e565b60c0820152610c818960e0850161093e565b60e08201526101008084013583811115610c99578788fd5b610ca58b828701610a24565b918301919091525095989597505050506040840135936060013592915050565b60008060408385031215610cd7578182fd5b825167ffffffffffffffff80821115610cee578384fd5b610cfa868387016109c6565b93506020850151915080821115610d0f578283fd5b50610d1c858286016109c6565b9150509250929050565b600060208284031215610d37578081fd5b5035919050565b600080600060608486031215610d52578283fd5b8335925060208085013567ffffffffffffffff80821115610d71578485fd5b818701915087601f830112610d84578485fd5b8135610d9261096d82611160565b81815284810190848601868402860187018c1015610dae578889fd5b8895505b83861015610dd9578035610dc581611180565b835260019590950194918601918601610db2565b50965050506040870135925080831115610df1578384fd5b5050610dff8682870161094f565b9150509250925092565b600060208284031215610e1a578081fd5b813560038110610e28578182fd5b9392505050565b600060208284031215610e40578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260208085019450808401835b83811015610ea657815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101610e74565b509495945050505050565b6000815180845260208085019450808401835b83811015610ea657815187529582019590820190600101610ec4565b60008151808452815b81811015610f0557602081850181015186830182015201610ee9565b81811115610f165782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60028110610f5357fe5b9052565b600060608252610f6a6060830186610e61565b828103602084810191909152855180835286820192820190845b81811015610fa057845183529383019391830191600101610f84565b50508481036040860152610fb48187610eb1565b98975050505050505050565b600060408252610fd36040830185610e61565b8281036020840152610fe58185610eb1565b95945050505050565b90815260200190565b600088825273ffffffffffffffffffffffffffffffffffffffff808916602084015280881660408401525060e0606083015261103660e0830187610eb1565b8560808401528460a084015282810360c08401526110548185610ee0565b9a9950505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600060608252611097606083018651610f49565b60208501516110a96080840182610e47565b5060408501516110bc60a0840182610e47565b50606085015160c0830152608085015160e083015260a0850151610100818185015260c087015191506101206110f481860184610e47565b60e08801519250611109610140860184610e47565b818801519250806101608601525050611126610180840182610ee0565b6020840195909552505060400152919050565b60405181810167ffffffffffffffff8111828210171561115857600080fd5b604052919050565b600067ffffffffffffffff821115611176578081fd5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff811681146111a257600080fd5b5056fea26469706673582212205c2f13c004cb770f74a90b041a0fdec067e5f13bef06d0ccb7869ebf8d61291e64736f6c63430007010033";

type MockVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockVault__factory extends ContractFactory {
  constructor(...args: MockVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    authorizer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockVault> {
    return super.deploy(authorizer, overrides || {}) as Promise<MockVault>;
  }
  getDeployTransaction(
    authorizer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(authorizer, overrides || {});
  }
  attach(address: string): MockVault {
    return super.attach(address) as MockVault;
  }
  connect(signer: Signer): MockVault__factory {
    return super.connect(signer) as MockVault__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockVaultInterface {
    return new utils.Interface(_abi) as MockVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockVault {
    return new Contract(address, _abi, signerOrProvider) as MockVault;
  }
}

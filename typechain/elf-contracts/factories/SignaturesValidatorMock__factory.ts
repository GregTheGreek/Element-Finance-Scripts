/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SignaturesValidatorMock,
  SignaturesValidatorMockInterface,
} from "../SignaturesValidatorMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "Authenticated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "CalldataDecoded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "anotherFunction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "authenticateCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decodeCalldata",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getDomainSeparator",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getNextNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "increaseNonce",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101006040527f088e910861b9d0ac056c32bb5d44fcdd155bbfa025bdca87c7390e174ac6179560e05234801561003557600080fd5b50604080518082018252601181527010985b185b98d95c88158c8815985d5b1d607a1b6020808301918252835180850190945260018452603160f81b908401908152915190206080529051902060a0527f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60c05260805160a05160c05160e0516107bd6100de6000398061066952508061036c5250806103ae52508061038d52506107bd6000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c806390193b7c1161005057806390193b7c1461011257806394df26d614610157578063ed24911d1461015f57610072565b806325e511851461007757806378ea7ae7146100ac5780638247a97c146100df575b600080fd5b6100aa6004803603602081101561008d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610167565b005b6100aa600480360360208110156100c257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166101ce565b6100aa600480360360208110156100f557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166101d1565b6101456004803603602081101561012857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166101fe565b60408051918252519081900360200190f35b6100aa610226565b610145610230565b610173816101f8610240565b61017b610286565b6040805173ffffffffffffffffffffffffffffffffffffffff8316815233602082015281517fd42c368decf104a7572c7884ea7028fe04ef7d3e76dbd706484f9175d6c4ec62929181900390910190a150565b50565b73ffffffffffffffffffffffffffffffffffffffff16600090815260208190526040902080546001019055565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b61022e610286565b565b600061023a610368565b90505b90565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902080546001810190915561028161027b8483610433565b836105c8565b505050565b60008060006102936105da565b9250925092507f6ab714885e85fe1094a5f8af742b0c2eb868ce590c1280ec1c3594899d143cbf6102c2610608565b6102ca610657565b85858560405180806020018681526020018560ff168152602001848152602001838152602001828103825287818151815260200191508051906020019080838360005b8381101561032557818101518382015260200161030d565b50505050905090810190601f1680156103525780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a1505050565b60007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006103d5610663565b30604051602001808681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060405160208183030381529060405280519060200120905090565b60008061043e610657565b9050428110156104525760009150506105c2565b600061045c610667565b90508061046e576000925050506105c2565b600081610479610608565b80516020918201206040805180840194909452838101919091523360608401526080830188905260a08084018790528151808503909101815260c090930190528151910120905060006104cb8261068b565b905060008060006104da6105da565b925092509250600060018585858560405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561053c573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116158015906105b757508a73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b985050505050505050505b92915050565b816105d6576105d6816106f2565b5050565b60008060006105e9602061075f565b92506105f5604061075f565b9150610601606061075f565b9050909192565b60606000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050825192935050506080101561023d5760803603815290565b600061023a600061075f565b4690565b7f000000000000000000000000000000000000000000000000000000000000000090565b6000610695610368565b8260405160200180807f190100000000000000000000000000000000000000000000000000000000000081525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b7f08c379a0000000000000000000000000000000000000000000000000000000006000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b36017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8001359056fea26469706673582212209c18e974b3adf7c3a9b925993f8124b78dfa612efe6a26d8faca0d5441bdcaa464736f6c63430007010033";

type SignaturesValidatorMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SignaturesValidatorMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SignaturesValidatorMock__factory extends ContractFactory {
  constructor(...args: SignaturesValidatorMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SignaturesValidatorMock> {
    return super.deploy(overrides || {}) as Promise<SignaturesValidatorMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SignaturesValidatorMock {
    return super.attach(address) as SignaturesValidatorMock;
  }
  connect(signer: Signer): SignaturesValidatorMock__factory {
    return super.connect(signer) as SignaturesValidatorMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SignaturesValidatorMockInterface {
    return new utils.Interface(_abi) as SignaturesValidatorMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SignaturesValidatorMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SignaturesValidatorMock;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CodeSizeChecker,
  CodeSizeCheckerInterface,
} from "../CodeSizeChecker";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "which",
        type: "address",
      },
    ],
    name: "codeSize",
    outputs: [
      {
        internalType: "uint256",
        name: "ret",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060cc8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806352872cf314602d575b600080fd5b603c60383660046054565b6050565b60405160479190608d565b60405180910390f35b3b90565b6000602082840312156064578081fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146086578182fd5b9392505050565b9081526020019056fea2646970667358221220f5614bfc9f65e7dca17a0946ca06cecf38d41290df36bf3dddf4693f657af08064736f6c63430008000033";

type CodeSizeCheckerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CodeSizeCheckerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CodeSizeChecker__factory extends ContractFactory {
  constructor(...args: CodeSizeCheckerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CodeSizeChecker> {
    return super.deploy(overrides || {}) as Promise<CodeSizeChecker>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CodeSizeChecker {
    return super.attach(address) as CodeSizeChecker;
  }
  connect(signer: Signer): CodeSizeChecker__factory {
    return super.connect(signer) as CodeSizeChecker__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CodeSizeCheckerInterface {
    return new utils.Interface(_abi) as CodeSizeCheckerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CodeSizeChecker {
    return new Contract(address, _abi, signerOrProvider) as CodeSizeChecker;
  }
}

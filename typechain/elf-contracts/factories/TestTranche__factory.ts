/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestTranche, TestTrancheInterface } from "../TestTranche";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "baseToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "underlying",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "unlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161018238038061018283398101604081905261002f91610058565b600080546001600160a01b0319166001600160a01b039390931692909217909155600155610090565b6000806040838503121561006a578182fd5b82516001600160a01b0381168114610080578283fd5b6020939093015192949293505050565b60e48061009e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80636f307dc3146037578063aa082a9d146051575b600080fd5b603d6062565b604051604891906084565b60405180910390f35b6057607e565b6040516048919060a5565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b60015490565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b9081526020019056fea26469706673582212208a5547c344c0a71574403baeafcd2a1f85dfc5e226be58ced96099792de82bb164736f6c63430008000033";

type TestTrancheConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestTrancheConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestTranche__factory extends ContractFactory {
  constructor(...args: TestTrancheConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    baseToken: string,
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestTranche> {
    return super.deploy(
      baseToken,
      timestamp,
      overrides || {}
    ) as Promise<TestTranche>;
  }
  getDeployTransaction(
    baseToken: string,
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(baseToken, timestamp, overrides || {});
  }
  attach(address: string): TestTranche {
    return super.attach(address) as TestTranche;
  }
  connect(signer: Signer): TestTranche__factory {
    return super.connect(signer) as TestTranche__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTrancheInterface {
    return new utils.Interface(_abi) as TestTrancheInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestTranche {
    return new Contract(address, _abi, signerOrProvider) as TestTranche;
  }
}

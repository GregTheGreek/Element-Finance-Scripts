/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockFlashLoanRecipient,
  MockFlashLoanRecipientInterface,
} from "../MockFlashLoanRecipient";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_vault",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "feeAmounts",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "userData",
        type: "bytes",
      },
    ],
    name: "receiveFlashLoan",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "reenter",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "repayInExcess",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "repayLoan",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_reenter",
        type: "bool",
      },
    ],
    name: "setReenter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_repayInExcess",
        type: "bool",
      },
    ],
    name: "setRepayInExcess",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_repayLoan",
        type: "bool",
      },
    ],
    name: "setRepayLoan",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "vault",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610b98380380610b988339818101604052602081101561003357600080fd5b50516001600160601b031960609190911b166080526000805462ffff001960ff1990911660011716905560805160601c610b1961007f6000398061081f52806108655250610b196000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063b77f3a231161005b578063b77f3a23146100f1578063f04f270714610110578063f966ade714610342578063fbfa77cf1461034a57610088565b80633207ce3c1461008d57806362a82399146100a9578063a0fe97e3146100ca578063a6af1703146100d2575b600080fd5b61009561037b565b604080519115158252519081900360200190f35b6100c8600480360360208110156100bf57600080fd5b50351515610389565b005b6100956103ba565b6100c8600480360360208110156100e857600080fd5b503515156103c9565b6100c86004803603602081101561010757600080fd5b50351515610401565b6100c86004803603608081101561012657600080fd5b81019060208101813564010000000081111561014157600080fd5b82018360208201111561015357600080fd5b8035906020019184602083028401116401000000008311171561017557600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156101c557600080fd5b8201836020820111156101d757600080fd5b803590602001918460208302840111640100000000831117156101f957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561024957600080fd5b82018360208201111561025b57600080fd5b8035906020019184602083028401116401000000008311171561027d57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156102cd57600080fd5b8201836020820111156102df57600080fd5b8035906020019184600183028401116401000000008311171561030157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610438945050505050565b61009561085a565b610352610863565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600054610100900460ff1681565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60005462010000900460ff1681565b6000805491151562010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff909216919091179055565b60008054911515610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909216919091179055565b60005b845181101561085357600085828151811061045257fe5b60200260200101519050600085838151811061046a57fe5b60200260200101519050600085848151811061048257fe5b60200260200101519050818373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156104f457600080fd5b505afa158015610508573d6000803e3d6000fd5b505050506040513d602081101561051e57600080fd5b50511461058c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f494e56414c49445f464c4153484c4f414e5f42414c414e434500000000000000604482015290519081900360640190fd5b60005462010000900460ff1615610704576040517f5c38449e00000000000000000000000000000000000000000000000000000000815230600482018181526080602484019081528b5160848501528b513394635c38449e94938e938e938d936044810191606482019160a401906020808a01910280838360005b8381101561061f578181015183820152602001610607565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561065e578181015183820152602001610646565b50505050905001848103825285818151815260200191508051906020019080838360005b8381101561069a578181015183820152602001610682565b50505050905090810190601f1680156106c75780820380516001836020036101000a031916815260200191505b50975050505050505050600060405180830381600087803b1580156106eb57600080fd5b505af11580156106ff573d6000803e3d6000fd5b505050505b8273ffffffffffffffffffffffffffffffffffffffff166340c10f1930600060019054906101000a900460ff1661073b5783610746565b610746846001610887565b6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561079957600080fd5b505af11580156107ad573d6000803e3d6000fd5b5050505060006107c6828461088790919063ffffffff16565b60005490915060ff166107e5576107de8160016108a0565b9050610803565b600054610100900460ff161561080357610800816001610887565b90505b61084473ffffffffffffffffffffffffffffffffffffffff85167f0000000000000000000000000000000000000000000000000000000000000000836108b6565b5050505080600101905061043b565b5050505050565b60005460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008282016108998482101583610948565b9392505050565b60006108b0838311156001610948565b50900390565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261094390849061095a565b505050565b816109565761095681610a76565b5050565b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b602083106109c357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610986565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610a25576040519150601f19603f3d011682016040523d82523d6000602084013e610a2a565b606091505b50915091506000821415610a42573d6000803e3d6000fd5b610a70815160001480610a685750818060200190516020811015610a6557600080fd5b50515b6101a2610948565b50505050565b7f08c379a0000000000000000000000000000000000000000000000000000000006000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fdfea2646970667358221220cc79e7ff5f7783a31112c55da8385f08aaba217a74f14cad70e5a80d1366632264736f6c63430007010033";

type MockFlashLoanRecipientConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockFlashLoanRecipientConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockFlashLoanRecipient__factory extends ContractFactory {
  constructor(...args: MockFlashLoanRecipientConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockFlashLoanRecipient> {
    return super.deploy(
      _vault,
      overrides || {}
    ) as Promise<MockFlashLoanRecipient>;
  }
  getDeployTransaction(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_vault, overrides || {});
  }
  attach(address: string): MockFlashLoanRecipient {
    return super.attach(address) as MockFlashLoanRecipient;
  }
  connect(signer: Signer): MockFlashLoanRecipient__factory {
    return super.connect(signer) as MockFlashLoanRecipient__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockFlashLoanRecipientInterface {
    return new utils.Interface(_abi) as MockFlashLoanRecipientInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockFlashLoanRecipient {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockFlashLoanRecipient;
  }
}

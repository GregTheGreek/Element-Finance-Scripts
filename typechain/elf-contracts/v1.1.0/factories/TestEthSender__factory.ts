/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestEthSender, TestEthSenderInterface } from "../TestEthSender";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "to",
        type: "address",
      },
    ],
    name: "sendEth",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060e68061001f6000396000f3fe608060405260043610601c5760003560e01c806376a54c60146021575b600080fd5b6030602c3660046077565b6032565b005b60405173ffffffffffffffffffffffffffffffffffffffff8216903480156108fc02916000818181858888f193505050501580156073573d6000803e3d6000fd5b5050565b6000602082840312156087578081fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811460a9578182fd5b939250505056fea2646970667358221220e72f7aeda97a45993905e189649210a6c4228b6544669677e969f54d1dc4df9b64736f6c63430008000033";

type TestEthSenderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestEthSenderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestEthSender__factory extends ContractFactory {
  constructor(...args: TestEthSenderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestEthSender> {
    return super.deploy(overrides || {}) as Promise<TestEthSender>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestEthSender {
    return super.attach(address) as TestEthSender;
  }
  connect(signer: Signer): TestEthSender__factory {
    return super.connect(signer) as TestEthSender__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestEthSenderInterface {
    return new utils.Interface(_abi) as TestEthSenderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestEthSender {
    return new Contract(address, _abi, signerOrProvider) as TestEthSender;
  }
}

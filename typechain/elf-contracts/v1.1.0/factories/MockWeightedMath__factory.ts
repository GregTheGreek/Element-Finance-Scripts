/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockWeightedMath,
  MockWeightedMathInterface,
} from "../MockWeightedMath";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "normalizedWeights",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amountsOut",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapFee",
        type: "uint256",
      },
    ],
    name: "bptInForExactTokensOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "normalizedWeight",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "previousInvariant",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentInvariant",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "protocolSwapFeePercentage",
        type: "uint256",
      },
    ],
    name: "calculateDueTokenProtocolSwapFeeAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenNormalizedWeight",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptAmountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapFee",
        type: "uint256",
      },
    ],
    name: "exactBPTInForTokenOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "currentBalances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "bptAmountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalBPT",
        type: "uint256",
      },
    ],
    name: "exactBPTInForTokensOut",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "normalizedWeights",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amountsIn",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapFee",
        type: "uint256",
      },
    ],
    name: "exactTokensInForBPTOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenBalanceIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenWeightIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenBalanceOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenWeightOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenAmountOut",
        type: "uint256",
      },
    ],
    name: "inGivenOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "normalizedWeights",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
    ],
    name: "invariant",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenBalanceIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenWeightIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenBalanceOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenWeightOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenAmountIn",
        type: "uint256",
      },
    ],
    name: "outGivenIn",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenNormalizedWeight",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptAmountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapFee",
        type: "uint256",
      },
    ],
    name: "tokenInForExactBPTOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611dba806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063567853711161007657806398f59bca1161005b57806398f59bca14610528578063c2546cc3146106d8578063fab3b9d71461070d576100a3565b806356785371146103cc5780635b55b24a146104f3576100a3565b80631b02e9a8146100a85780631c855fa6146100ef5780632e752149146101e75780634b114ddf14610397575b600080fd5b6100dd600480360360a08110156100be57600080fd5b5080359060208101359060408101359060608101359060800135610742565b60408051918252519081900360200190f35b6101976004803603606081101561010557600080fd5b81019060208101813564010000000081111561012057600080fd5b82018360208201111561013257600080fd5b8035906020019184602083028401116401000000008311171561015457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550508235935050506020013561075d565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101d35781810151838201526020016101bb565b505050509050019250505060405180910390f35b6100dd600480360360a08110156101fd57600080fd5b81019060208101813564010000000081111561021857600080fd5b82018360208201111561022a57600080fd5b8035906020019184602083028401116401000000008311171561024c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561029c57600080fd5b8201836020820111156102ae57600080fd5b803590602001918460208302840111640100000000831117156102d057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561032057600080fd5b82018360208201111561033257600080fd5b8035906020019184602083028401116401000000008311171561035457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505082359350505060200135610772565b6100dd600480360360a08110156103ad57600080fd5b5080359060208101359060408101359060608101359060800135610781565b6100dd600480360360408110156103e257600080fd5b8101906020810181356401000000008111156103fd57600080fd5b82018360208201111561040f57600080fd5b8035906020019184602083028401116401000000008311171561043157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561048157600080fd5b82018360208201111561049357600080fd5b803590602001918460208302840111640100000000831117156104b557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610790945050505050565b6100dd600480360360a081101561050957600080fd5b50803590602081013590604081013590606081013590608001356107a5565b6100dd600480360360a081101561053e57600080fd5b81019060208101813564010000000081111561055957600080fd5b82018360208201111561056b57600080fd5b8035906020019184602083028401116401000000008311171561058d57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156105dd57600080fd5b8201836020820111156105ef57600080fd5b8035906020019184602083028401116401000000008311171561061157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561066157600080fd5b82018360208201111561067357600080fd5b8035906020019184602083028401116401000000008311171561069557600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050823593505050602001356107b4565b6100dd600480360360a08110156106ee57600080fd5b50803590602081013590604081013590606081013590608001356107c3565b6100dd600480360360a081101561072357600080fd5b50803590602081013590604081013590606081013590608001356107d2565b600061075186868686866107e1565b90505b95945050505050565b606061076a848484610865565b949350505050565b60006107518686868686610917565b60006107518686868686610b7c565b600061079c8383610be9565b90505b92915050565b60006107518686868686610c54565b60006107518686868686610d11565b60006107518686868686610ef6565b60006107518686868686610f98565b60006108036107f885670429d069189e000061100c565b831115610131611042565b60006108196108128685611054565b869061106a565b90506000610827858861106a565b9050600061083583836110c1565b9050600061084b82670de0b6b3a7640000611054565b90506108578a826110f4565b9a9950505050505050505050565b60606000610873848461114e565b90506060855167ffffffffffffffff8111801561088f57600080fd5b506040519080825280602002602001820160405280156108b9578160200160208202803683370190505b50905060005b865181101561090d576108ee838883815181106108d857fe5b602002602001015161100c90919063ffffffff16565b8282815181106108fa57fe5b60209081029190910101526001016108bf565b5095945050505050565b60006060845167ffffffffffffffff8111801561093357600080fd5b5060405190808252806020026020018201604052801561095d578160200160208202803683370190505b5090506000805b8851811015610a12576109c389828151811061097c57fe5b60200260200101516109bd89848151811061099357fe5b60200260200101518c85815181106109a757fe5b602002602001015161119690919063ffffffff16565b9061114e565b8382815181106109cf57fe5b602002602001018181525050610a08610a018983815181106109ed57fe5b60200260200101518584815181106108d857fe5b8390611196565b9150600101610964565b50670de0b6b3a764000060005b8951811015610b3a57600083858381518110610a3757fe5b60200260200101511115610abc576000610a68610a5c86670de0b6b3a7640000611054565b8d85815181106108d857fe5b90506000610a92828c8681518110610a7c57fe5b602002602001015161105490919063ffffffff16565b9050610ab3610a01610aac670de0b6b3a76400008c611054565b839061100c565b92505050610ad3565b888281518110610ac857fe5b602002602001015190505b6000610afc8c8481518110610ae457fe5b60200260200101516109bd848f87815181106109a757fe5b9050610b2e610b278c8581518110610b1057fe5b6020026020010151836111a890919063ffffffff16565b859061100c565b93505050600101610a1f565b50670de0b6b3a76400008110610b7057610b66610b5f82670de0b6b3a7640000611054565b879061100c565b9350505050610754565b60009350505050610754565b6000610b9e610b9387670429d069189e000061100c565b831115610130611042565b6000610baa8784611196565b90506000610bb8888361106a565b90506000610bc6888761114e565b90506000610bd483836110c1565b9050610857610be2826111f0565b899061100c565b670de0b6b3a764000060005b8351811015610c4457610c3a610aac858381518110610c1057fe5b6020026020010151858481518110610c2457fe5b60200260200101516111a890919063ffffffff16565b9150600101610bf5565b5061079f60008211610137611042565b600080610c6b84610c658188611054565b9061106a565b9050610c846709b6e64a8ec60000821015610132611042565b6000610ca2610c9b670de0b6b3a76400008961114e565b83906110c1565b90506000610cb9610cb2836111f0565b8a9061100c565b90506000610cc6896111f0565b90506000610cd483836110f4565b90506000610ce28483611054565b9050610d01610cfa610cf38a6111f0565b849061100c565b8290611196565b9c9b505050505050505050505050565b60006060845167ffffffffffffffff81118015610d2d57600080fd5b50604051908082528060200260200182016040528015610d57578160200160208202803683370190505b5090506000805b8851811015610dff57610da1898281518110610d7657fe5b6020026020010151610c65898481518110610d8d57fe5b60200260200101518c8581518110610a7c57fe5b838281518110610dad57fe5b602002602001018181525050610df5610a01898381518110610dcb57fe5b6020026020010151858481518110610ddf57fe5b60200260200101516110f490919063ffffffff16565b9150600101610d5e565b50670de0b6b3a764000060005b8951811015610ed5576000848281518110610e2357fe5b6020026020010151841115610e75576000610e40610a5c866111f0565b90506000610e54828c8681518110610a7c57fe5b9050610e6c610a01610e658b6111f0565b839061106a565b92505050610e8c565b888281518110610e8157fe5b602002602001015190505b6000610eb58c8481518110610e9d57fe5b60200260200101516109bd848f8781518110610a7c57fe5b9050610ec9610b278c8581518110610b1057fe5b93505050600101610e0c565b50610ee9610ee2826111f0565b87906110f4565b9998505050505050505050565b600080610f0784610c658188611196565b9050610f206729a2241af62c0000821115610133611042565b6000610f37610c9b670de0b6b3a76400008961106a565b90506000610f57610f5083670de0b6b3a7640000611054565b8a906110f4565b90506000610f64896111f0565b90506000610f7283836110f4565b90506000610f808483611054565b9050610d01610cfa610f918a6111f0565b849061106a565b6000838311610fa957506000610754565b6000610fb5858561106a565b90506000610fcb670de0b6b3a76400008861114e565b9050610fdf826709b6e64a8ec6000061121c565b91506000610fed83836110c1565b90506000611004610ffd836111f0565b8b9061100c565b905061085781875b600082820261103084158061102957508385838161102657fe5b04145b6003611042565b670de0b6b3a764000090049392505050565b816110505761105081611233565b5050565b6000611064838311156001611042565b50900390565b60006110798215156004611042565b826110865750600061079f565b670de0b6b3a7640000838102906110a9908583816110a057fe5b04146005611042565b8260018203816110b557fe5b0460010191505061079f565b6000806110ce84846112a0565b905060006110e86110e1836127106110f4565b6001611196565b90506107548282611196565b600082820261110e84158061102957508385838161102657fe5b8061111d57600091505061079f565b670de0b6b3a76400007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82016110b5565b600061115d8215156004611042565b8261116a5750600061079f565b670de0b6b3a764000083810290611184908583816110a057fe5b82818161118d57fe5b0491505061079f565b600082820161079c8482101583611042565b6000806111b584846112a0565b905060006111c86110e1836127106110f4565b9050808210156111dd5760009250505061079f565b6111e78282611054565b9250505061079f565b6000670de0b6b3a76400008210611208576000611214565b81670de0b6b3a7640000035b90505b919050565b60008183101561122c578161079c565b5090919050565b7f08c379a0000000000000000000000000000000000000000000000000000000006000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6000816112b65750670de0b6b3a764000061079f565b826112c35750600061079f565b6112f07f800000000000000000000000000000000000000000000000000000000000000084106006611042565b82611316770bce5086492111aea88f4bb1ca6bcf584181ea8059f7653284106007611042565b826000670c7d713b49da0000831380156113375750670f43fc2c04ee000083125b1561136e576000611347846113dd565b9050670de0b6b3a764000080820784020583670de0b6b3a76400008305020191505061137c565b8161137884611514565b0290505b670de0b6b3a764000090056113ca7ffffffffffffffffffffffffffffffffffffffffffffffffdc702bd3a30fc000082128015906113c3575068070c1cc73b00c800008213155b6008611042565b6113d3816118b4565b9695505050505050565b670de0b6b3a7640000026000806ec097ce7bc90715b34b9f1000000000808401907fffffffffffffffffffffffffffffffffff3f68318436f8ea4cb460f0000000008501028161142957fe5b05905060006ec097ce7bc90715b34b9f100000000082800205905081806ec097ce7bc90715b34b9f100000000081840205915060038205016ec097ce7bc90715b34b9f100000000082840205915060058205016ec097ce7bc90715b34b9f100000000082840205915060078205016ec097ce7bc90715b34b9f100000000082840205915060098205016ec097ce7bc90715b34b9f1000000000828402059150600b8205016ec097ce7bc90715b34b9f1000000000828402059150600d8205016ec097ce7bc90715b34b9f1000000000828402059150600f826002919005919091010295945050505050565b6000670de0b6b3a764000082121561155157611547826ec097ce7bc90715b34b9f10000000008161154157fe5b05611514565b6000039050611217565b60007e1600ef3172e58d2e933ec884fde10064c63b5372d805e203c000000000000083126115a257770195e54c5dd42177f53a27172fa9ec630262827000000000830592506806f05b59d3b2000000015b73011798004d755d3c8bc8e03204cf44619e00000083126115da576b1425982cf597cd205cef7380830592506803782dace9d9000000015b606492830292026e01855144814a7ff805980ff00840008312611622576e01855144814a7ff805980ff008400068056bc75e2d63100000840205925068ad78ebc5ac62000000015b6b02df0ab5a80a22c61ab5a700831261165d576b02df0ab5a80a22c61ab5a70068056bc75e2d6310000084020592506856bc75e2d631000000015b693f1fce3da636ea5cf850831261169457693f1fce3da636ea5cf85068056bc75e2d631000008402059250682b5e3af16b18800000015b690127fa27722cc06cc5e283126116cb57690127fa27722cc06cc5e268056bc75e2d6310000084020592506815af1d78b58c400000015b68280e60114edb805d0383126117005768280e60114edb805d0368056bc75e2d631000008402059250680ad78ebc5ac6200000015b680ebc5fb41746121110831261172b57680ebc5fb4174612111068056bc75e2d631000009384020592015b6808f00f760a4b2db55d8312611760576808f00f760a4b2db55d68056bc75e2d6310000084020592506802b5e3af16b1880000015b6806f5f17757889379378312611795576806f5f177578893793768056bc75e2d63100000840205925068015af1d78b58c40000015b6806248f33704b28660383126117c9576806248f33704b28660368056bc75e2d63100000840205925067ad78ebc5ac620000015b6805c548670b9510e7ac83126117fd576805c548670b9510e7ac68056bc75e2d6310000084020592506756bc75e2d6310000015b600068056bc75e2d63100000840168056bc75e2d63100000808603028161182057fe5b059050600068056bc75e2d63100000828002059050818068056bc75e2d63100000818402059150600382050168056bc75e2d63100000828402059150600582050168056bc75e2d63100000828402059150600782050168056bc75e2d63100000828402059150600982050168056bc75e2d63100000828402059150600b820501600202606485820105979650505050505050565b60006118f97ffffffffffffffffffffffffffffffffffffffffffffffffdc702bd3a30fc000083121580156118f2575068070c1cc73b00c800008313155b6009611042565b600082121561192d5761190e826000036118b4565b6ec097ce7bc90715b34b9f10000000008161192557fe5b059050611217565b60006806f05b59d3b2000000831261198357507ffffffffffffffffffffffffffffffffffffffffffffffff90fa4a62c4e00000090910190770195e54c5dd42177f53a27172fa9ec6302628270000000006119cf565b6803782dace9d900000083126119cb57507ffffffffffffffffffffffffffffffffffffffffffffffffc87d2531627000000909101906b1425982cf597cd205cef73806119cf565b5060015b6064929092029168056bc75e2d6310000068ad78ebc5ac620000008412611a35577fffffffffffffffffffffffffffffffffffffffffffffff5287143a539e0000009093019268056bc75e2d631000006e01855144814a7ff805980ff008400082020590505b6856bc75e2d6310000008412611a87577fffffffffffffffffffffffffffffffffffffffffffffffa9438a1d29cf0000009093019268056bc75e2d631000006b02df0ab5a80a22c61ab5a70082020590505b682b5e3af16b188000008412611ad7577fffffffffffffffffffffffffffffffffffffffffffffffd4a1c50e94e78000009093019268056bc75e2d63100000693f1fce3da636ea5cf85082020590505b6815af1d78b58c4000008412611b27577fffffffffffffffffffffffffffffffffffffffffffffffea50e2874a73c000009093019268056bc75e2d63100000690127fa27722cc06cc5e282020590505b680ad78ebc5ac62000008412611b76577ffffffffffffffffffffffffffffffffffffffffffffffff5287143a539e000009093019268056bc75e2d6310000068280e60114edb805d0382020590505b68056bc75e2d631000008412611bc5577ffffffffffffffffffffffffffffffffffffffffffffffffa9438a1d29cf000009093019268056bc75e2d63100000680ebc5fb4174612111082020590505b6802b5e3af16b18800008412611c14577ffffffffffffffffffffffffffffffffffffffffffffffffd4a1c50e94e7800009093019268056bc75e2d631000006808f00f760a4b2db55d82020590505b68015af1d78b58c400008412611c63577ffffffffffffffffffffffffffffffffffffffffffffffffea50e2874a73c00009093019268056bc75e2d631000006806f5f177578893793782020590505b68056bc75e2d631000008481019085906002908280020505918201919050600368056bc75e2d631000008783020505918201919050600468056bc75e2d631000008783020505918201919050600568056bc75e2d631000008783020505918201919050600668056bc75e2d631000008783020505918201919050600768056bc75e2d631000008783020505918201919050600868056bc75e2d631000008783020505918201919050600968056bc75e2d631000008783020505918201919050600a68056bc75e2d631000008783020505918201919050600b68056bc75e2d631000008783020505918201919050600c68056bc75e2d631000008783020505918201919050606468056bc75e2d6310000084840205850205969550505050505056fea2646970667358221220a7e6decff4416790eebeb4e6a84835880a11cede96bf206cf0ea9f6ab6752b2764736f6c63430007010033";

type MockWeightedMathConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockWeightedMathConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockWeightedMath__factory extends ContractFactory {
  constructor(...args: MockWeightedMathConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockWeightedMath> {
    return super.deploy(overrides || {}) as Promise<MockWeightedMath>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockWeightedMath {
    return super.attach(address) as MockWeightedMath;
  }
  connect(signer: Signer): MockWeightedMath__factory {
    return super.connect(signer) as MockWeightedMath__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockWeightedMathInterface {
    return new utils.Interface(_abi) as MockWeightedMathInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockWeightedMath {
    return new Contract(address, _abi, signerOrProvider) as MockWeightedMath;
  }
}

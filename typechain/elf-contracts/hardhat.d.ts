/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Authentication",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Authentication__factory>;
    getContractFactory(
      name: "BalancerHelpers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalancerHelpers__factory>;
    getContractFactory(
      name: "IAuthentication",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAuthentication__factory>;
    getContractFactory(
      name: "ISignaturesValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISignaturesValidator__factory>;
    getContractFactory(
      name: "ITemporarilyPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITemporarilyPausable__factory>;
    getContractFactory(
      name: "SignaturesValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignaturesValidator__factory>;
    getContractFactory(
      name: "TemporarilyPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TemporarilyPausable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "BalancerPoolToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalancerPoolToken__factory>;
    getContractFactory(
      name: "BaseGeneralPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseGeneralPool__factory>;
    getContractFactory(
      name: "BaseMinimalSwapInfoPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseMinimalSwapInfoPool__factory>;
    getContractFactory(
      name: "BasePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasePool__factory>;
    getContractFactory(
      name: "BasePoolAuthorization",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasePoolAuthorization__factory>;
    getContractFactory(
      name: "BasePoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasePoolFactory__factory>;
    getContractFactory(
      name: "FactoryWidePauseWindow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FactoryWidePauseWindow__factory>;
    getContractFactory(
      name: "IPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracle__factory>;
    getContractFactory(
      name: "IWeightedPoolPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWeightedPoolPriceOracle__factory>;
    getContractFactory(
      name: "PoolPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolPriceOracle__factory>;
    getContractFactory(
      name: "StablePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StablePool__factory>;
    getContractFactory(
      name: "StablePoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StablePoolFactory__factory>;
    getContractFactory(
      name: "WeightedPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WeightedPool__factory>;
    getContractFactory(
      name: "WeightedPool2Tokens",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WeightedPool2Tokens__factory>;
    getContractFactory(
      name: "WeightedPool2TokensFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WeightedPool2TokensFactory__factory>;
    getContractFactory(
      name: "WeightedPoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WeightedPoolFactory__factory>;
    getContractFactory(
      name: "BalanceAllocationMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalanceAllocationMock__factory>;
    getContractFactory(
      name: "EthForceSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthForceSender__factory>;
    getContractFactory(
      name: "BalancerErrorsMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalancerErrorsMock__factory>;
    getContractFactory(
      name: "EnumerableIERC20ToBytes32MapMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EnumerableIERC20ToBytes32MapMock__factory>;
    getContractFactory(
      name: "ReentrancyAttack",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyAttack__factory>;
    getContractFactory(
      name: "ReentrancyMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyMock__factory>;
    getContractFactory(
      name: "SignaturesValidatorMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignaturesValidatorMock__factory>;
    getContractFactory(
      name: "TemporarilyPausableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TemporarilyPausableMock__factory>;
    getContractFactory(
      name: "MockAssetTransfersHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockAssetTransfersHandler__factory>;
    getContractFactory(
      name: "MockBalancerPoolToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBalancerPoolToken__factory>;
    getContractFactory(
      name: "MockBasePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBasePool__factory>;
    getContractFactory(
      name: "MockFlashLoanRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockFlashLoanRecipient__factory>;
    getContractFactory(
      name: "MockInternalBalanceRelayer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockInternalBalanceRelayer__factory>;
    getContractFactory(
      name: "MockPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPool__factory>;
    getContractFactory(
      name: "MockFactoryCreatedPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockFactoryCreatedPool__factory>;
    getContractFactory(
      name: "MockPoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPoolFactory__factory>;
    getContractFactory(
      name: "MockStableMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockStableMath__factory>;
    getContractFactory(
      name: "MockVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockVault__factory>;
    getContractFactory(
      name: "MockWeightedMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockWeightedMath__factory>;
    getContractFactory(
      name: "MockWeightedOracleMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockWeightedOracleMath__factory>;
    getContractFactory(
      name: "Multicall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall__factory>;
    getContractFactory(
      name: "PoolPriceOracleMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolPriceOracleMock__factory>;
    getContractFactory(
      name: "TestToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestToken__factory>;
    getContractFactory(
      name: "TokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenFactory__factory>;
    getContractFactory(
      name: "WeightedPool2TokensMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WeightedPool2TokensMock__factory>;
    getContractFactory(
      name: "WETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH__factory>;
    getContractFactory(
      name: "AssetManagers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AssetManagers__factory>;
    getContractFactory(
      name: "AssetTransfersHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AssetTransfersHandler__factory>;
    getContractFactory(
      name: "Authorizer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Authorizer__factory>;
    getContractFactory(
      name: "MinimalSwapInfoPoolsBalance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MinimalSwapInfoPoolsBalance__factory>;
    getContractFactory(
      name: "TwoTokenPoolsBalance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TwoTokenPoolsBalance__factory>;
    getContractFactory(
      name: "Fees",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Fees__factory>;
    getContractFactory(
      name: "FlashLoans",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlashLoans__factory>;
    getContractFactory(
      name: "IAuthorizer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAuthorizer__factory>;
    getContractFactory(
      name: "IBasePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBasePool__factory>;
    getContractFactory(
      name: "IFlashLoanRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlashLoanRecipient__factory>;
    getContractFactory(
      name: "IGeneralPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGeneralPool__factory>;
    getContractFactory(
      name: "IMinimalSwapInfoPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMinimalSwapInfoPool__factory>;
    getContractFactory(
      name: "IVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "PoolBalances",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolBalances__factory>;
    getContractFactory(
      name: "PoolRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolRegistry__factory>;
    getContractFactory(
      name: "PoolTokens",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolTokens__factory>;
    getContractFactory(
      name: "ProtocolFeesCollector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProtocolFeesCollector__factory>;
    getContractFactory(
      name: "Swaps",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Swaps__factory>;
    getContractFactory(
      name: "UserBalance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UserBalance__factory>;
    getContractFactory(
      name: "Vault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vault__factory>;
    getContractFactory(
      name: "VaultAuthorization",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultAuthorization__factory>;
    getContractFactory(
      name: "CompoundAssetProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompoundAssetProxy__factory>;
    getContractFactory(
      name: "ConvergentCurvePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConvergentCurvePool__factory>;
    getContractFactory(
      name: "DeploymentValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DeploymentValidator__factory>;
    getContractFactory(
      name: "IWrappedCoveredPrincipalToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWrappedCoveredPrincipalToken__factory>;
    getContractFactory(
      name: "WrappedCoveredPrincipalToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WrappedCoveredPrincipalToken__factory>;
    getContractFactory(
      name: "WrappedCoveredPrincipalTokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WrappedCoveredPrincipalTokenFactory__factory>;
    getContractFactory(
      name: "ConvergentPoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConvergentPoolFactory__factory>;
    getContractFactory(
      name: "InterestTokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterestTokenFactory__factory>;
    getContractFactory(
      name: "TrancheFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TrancheFactory__factory>;
    getContractFactory(
      name: "InterestToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterestToken__factory>;
    getContractFactory(
      name: "ComptrollerInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComptrollerInterface__factory>;
    getContractFactory(
      name: "CDelegateInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CDelegateInterface__factory>;
    getContractFactory(
      name: "CDelegationStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CDelegationStorage__factory>;
    getContractFactory(
      name: "CDelegatorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CDelegatorInterface__factory>;
    getContractFactory(
      name: "CErc20Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CErc20Interface__factory>;
    getContractFactory(
      name: "CErc20Storage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CErc20Storage__factory>;
    getContractFactory(
      name: "CTokenInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CTokenInterface__factory>;
    getContractFactory(
      name: "CTokenStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CTokenStorage__factory>;
    getContractFactory(
      name: "ICurvePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICurvePool__factory>;
    getContractFactory(
      name: "IDeploymentValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDeploymentValidator__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Decimals",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Decimals__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IInterestToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInterestToken__factory>;
    getContractFactory(
      name: "IInterestTokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInterestTokenFactory__factory>;
    getContractFactory(
      name: "ITranche",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITranche__factory>;
    getContractFactory(
      name: "ITrancheFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITrancheFactory__factory>;
    getContractFactory(
      name: "IVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IWrappedPosition",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWrappedPosition__factory>;
    getContractFactory(
      name: "IYearnVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYearnVault__factory>;
    getContractFactory(
      name: "Authorizable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Authorizable__factory>;
    getContractFactory(
      name: "DateString",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DateString__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "ERC20PermitWithSupply",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PermitWithSupply__factory>;
    getContractFactory(
      name: "CodeSizeChecker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CodeSizeChecker__factory>;
    getContractFactory(
      name: "MockERC20YearnVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20YearnVault__factory>;
    getContractFactory(
      name: "TestConvergentCurvePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestConvergentCurvePool__factory>;
    getContractFactory(
      name: "TestDate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestDate__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;
    getContractFactory(
      name: "TestEthSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestEthSender__factory>;
    getContractFactory(
      name: "TestTranche",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestTranche__factory>;
    getContractFactory(
      name: "TestUserProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestUserProxy__factory>;
    getContractFactory(
      name: "TestVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestVault__factory>;
    getContractFactory(
      name: "TestWrappedPosition",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestWrappedPosition__factory>;
    getContractFactory(
      name: "TestYVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestYVault__factory>;
    getContractFactory(
      name: "TestYVaultV4",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestYVaultV4__factory>;
    getContractFactory(
      name: "Tranche",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Tranche__factory>;
    getContractFactory(
      name: "UserProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UserProxy__factory>;
    getContractFactory(
      name: "WrappedPosition",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WrappedPosition__factory>;
    getContractFactory(
      name: "YVaultAssetProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YVaultAssetProxy__factory>;
    getContractFactory(
      name: "ZapSwapCurve",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZapSwapCurve__factory>;
    getContractFactory(
      name: "ZapTrancheHop",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZapTrancheHop__factory>;
    getContractFactory(
      name: "ZapYearnShares",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZapYearnShares__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Authentication",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Authentication>;
    getContractAt(
      name: "BalancerHelpers",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalancerHelpers>;
    getContractAt(
      name: "IAuthentication",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAuthentication>;
    getContractAt(
      name: "ISignaturesValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISignaturesValidator>;
    getContractAt(
      name: "ITemporarilyPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITemporarilyPausable>;
    getContractAt(
      name: "SignaturesValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignaturesValidator>;
    getContractAt(
      name: "TemporarilyPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TemporarilyPausable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "BalancerPoolToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalancerPoolToken>;
    getContractAt(
      name: "BaseGeneralPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseGeneralPool>;
    getContractAt(
      name: "BaseMinimalSwapInfoPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseMinimalSwapInfoPool>;
    getContractAt(
      name: "BasePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasePool>;
    getContractAt(
      name: "BasePoolAuthorization",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasePoolAuthorization>;
    getContractAt(
      name: "BasePoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasePoolFactory>;
    getContractAt(
      name: "FactoryWidePauseWindow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FactoryWidePauseWindow>;
    getContractAt(
      name: "IPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracle>;
    getContractAt(
      name: "IWeightedPoolPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWeightedPoolPriceOracle>;
    getContractAt(
      name: "PoolPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolPriceOracle>;
    getContractAt(
      name: "StablePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StablePool>;
    getContractAt(
      name: "StablePoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StablePoolFactory>;
    getContractAt(
      name: "WeightedPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WeightedPool>;
    getContractAt(
      name: "WeightedPool2Tokens",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WeightedPool2Tokens>;
    getContractAt(
      name: "WeightedPool2TokensFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WeightedPool2TokensFactory>;
    getContractAt(
      name: "WeightedPoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WeightedPoolFactory>;
    getContractAt(
      name: "BalanceAllocationMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalanceAllocationMock>;
    getContractAt(
      name: "EthForceSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EthForceSender>;
    getContractAt(
      name: "BalancerErrorsMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalancerErrorsMock>;
    getContractAt(
      name: "EnumerableIERC20ToBytes32MapMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EnumerableIERC20ToBytes32MapMock>;
    getContractAt(
      name: "ReentrancyAttack",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyAttack>;
    getContractAt(
      name: "ReentrancyMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyMock>;
    getContractAt(
      name: "SignaturesValidatorMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignaturesValidatorMock>;
    getContractAt(
      name: "TemporarilyPausableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TemporarilyPausableMock>;
    getContractAt(
      name: "MockAssetTransfersHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockAssetTransfersHandler>;
    getContractAt(
      name: "MockBalancerPoolToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockBalancerPoolToken>;
    getContractAt(
      name: "MockBasePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockBasePool>;
    getContractAt(
      name: "MockFlashLoanRecipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockFlashLoanRecipient>;
    getContractAt(
      name: "MockInternalBalanceRelayer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockInternalBalanceRelayer>;
    getContractAt(
      name: "MockPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPool>;
    getContractAt(
      name: "MockFactoryCreatedPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockFactoryCreatedPool>;
    getContractAt(
      name: "MockPoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPoolFactory>;
    getContractAt(
      name: "MockStableMath",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockStableMath>;
    getContractAt(
      name: "MockVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockVault>;
    getContractAt(
      name: "MockWeightedMath",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockWeightedMath>;
    getContractAt(
      name: "MockWeightedOracleMath",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockWeightedOracleMath>;
    getContractAt(
      name: "Multicall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall>;
    getContractAt(
      name: "PoolPriceOracleMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolPriceOracleMock>;
    getContractAt(
      name: "TestToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestToken>;
    getContractAt(
      name: "TokenFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenFactory>;
    getContractAt(
      name: "WeightedPool2TokensMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WeightedPool2TokensMock>;
    getContractAt(
      name: "WETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH>;
    getContractAt(
      name: "AssetManagers",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AssetManagers>;
    getContractAt(
      name: "AssetTransfersHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AssetTransfersHandler>;
    getContractAt(
      name: "Authorizer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Authorizer>;
    getContractAt(
      name: "MinimalSwapInfoPoolsBalance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MinimalSwapInfoPoolsBalance>;
    getContractAt(
      name: "TwoTokenPoolsBalance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TwoTokenPoolsBalance>;
    getContractAt(
      name: "Fees",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Fees>;
    getContractAt(
      name: "FlashLoans",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlashLoans>;
    getContractAt(
      name: "IAuthorizer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAuthorizer>;
    getContractAt(
      name: "IBasePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBasePool>;
    getContractAt(
      name: "IFlashLoanRecipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlashLoanRecipient>;
    getContractAt(
      name: "IGeneralPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGeneralPool>;
    getContractAt(
      name: "IMinimalSwapInfoPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMinimalSwapInfoPool>;
    getContractAt(
      name: "IVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "PoolBalances",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolBalances>;
    getContractAt(
      name: "PoolRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolRegistry>;
    getContractAt(
      name: "PoolTokens",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolTokens>;
    getContractAt(
      name: "ProtocolFeesCollector",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProtocolFeesCollector>;
    getContractAt(
      name: "Swaps",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Swaps>;
    getContractAt(
      name: "UserBalance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UserBalance>;
    getContractAt(
      name: "Vault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Vault>;
    getContractAt(
      name: "VaultAuthorization",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultAuthorization>;
    getContractAt(
      name: "CompoundAssetProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompoundAssetProxy>;
    getContractAt(
      name: "ConvergentCurvePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConvergentCurvePool>;
    getContractAt(
      name: "DeploymentValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DeploymentValidator>;
    getContractAt(
      name: "IWrappedCoveredPrincipalToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWrappedCoveredPrincipalToken>;
    getContractAt(
      name: "WrappedCoveredPrincipalToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WrappedCoveredPrincipalToken>;
    getContractAt(
      name: "WrappedCoveredPrincipalTokenFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WrappedCoveredPrincipalTokenFactory>;
    getContractAt(
      name: "ConvergentPoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConvergentPoolFactory>;
    getContractAt(
      name: "InterestTokenFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InterestTokenFactory>;
    getContractAt(
      name: "TrancheFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TrancheFactory>;
    getContractAt(
      name: "InterestToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InterestToken>;
    getContractAt(
      name: "ComptrollerInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComptrollerInterface>;
    getContractAt(
      name: "CDelegateInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CDelegateInterface>;
    getContractAt(
      name: "CDelegationStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CDelegationStorage>;
    getContractAt(
      name: "CDelegatorInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CDelegatorInterface>;
    getContractAt(
      name: "CErc20Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CErc20Interface>;
    getContractAt(
      name: "CErc20Storage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CErc20Storage>;
    getContractAt(
      name: "CTokenInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CTokenInterface>;
    getContractAt(
      name: "CTokenStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CTokenStorage>;
    getContractAt(
      name: "ICurvePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICurvePool>;
    getContractAt(
      name: "IDeploymentValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDeploymentValidator>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Decimals",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Decimals>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IInterestToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInterestToken>;
    getContractAt(
      name: "IInterestTokenFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInterestTokenFactory>;
    getContractAt(
      name: "ITranche",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITranche>;
    getContractAt(
      name: "ITrancheFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITrancheFactory>;
    getContractAt(
      name: "IVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "IWrappedPosition",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWrappedPosition>;
    getContractAt(
      name: "IYearnVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IYearnVault>;
    getContractAt(
      name: "Authorizable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Authorizable>;
    getContractAt(
      name: "DateString",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DateString>;
    getContractAt(
      name: "ERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "ERC20PermitWithSupply",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PermitWithSupply>;
    getContractAt(
      name: "CodeSizeChecker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CodeSizeChecker>;
    getContractAt(
      name: "MockERC20YearnVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20YearnVault>;
    getContractAt(
      name: "TestConvergentCurvePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestConvergentCurvePool>;
    getContractAt(
      name: "TestDate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestDate>;
    getContractAt(
      name: "TestERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20>;
    getContractAt(
      name: "TestEthSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestEthSender>;
    getContractAt(
      name: "TestTranche",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestTranche>;
    getContractAt(
      name: "TestUserProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestUserProxy>;
    getContractAt(
      name: "TestVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestVault>;
    getContractAt(
      name: "TestWrappedPosition",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestWrappedPosition>;
    getContractAt(
      name: "TestYVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestYVault>;
    getContractAt(
      name: "TestYVaultV4",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestYVaultV4>;
    getContractAt(
      name: "Tranche",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Tranche>;
    getContractAt(
      name: "UserProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UserProxy>;
    getContractAt(
      name: "WrappedPosition",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WrappedPosition>;
    getContractAt(
      name: "YVaultAssetProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YVaultAssetProxy>;
    getContractAt(
      name: "ZapSwapCurve",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZapSwapCurve>;
    getContractAt(
      name: "ZapTrancheHop",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZapTrancheHop>;
    getContractAt(
      name: "ZapYearnShares",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZapYearnShares>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
